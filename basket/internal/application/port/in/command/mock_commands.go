// Code generated by mockery v2.47.0. DO NOT EDIT.

package command

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCommands is an autogenerated mock type for the Commands type
type MockCommands struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, add
func (_m *MockCommands) AddItem(ctx context.Context, add AddItem) error {
	ret := _m.Called(ctx, add)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AddItem) error); ok {
		r0 = rf(ctx, add)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelBasket provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) CancelBasket(ctx context.Context, cmd CancelBasket) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CancelBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CancelBasket) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckoutBasket provides a mock function with given fields: ctx, checkout
func (_m *MockCommands) CheckoutBasket(ctx context.Context, checkout CheckoutBasket) error {
	ret := _m.Called(ctx, checkout)

	if len(ret) == 0 {
		panic("no return value specified for CheckoutBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, CheckoutBasket) error); ok {
		r0 = rf(ctx, checkout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveItem provides a mock function with given fields: ctx, remove
func (_m *MockCommands) RemoveItem(ctx context.Context, remove RemoveItem) error {
	ret := _m.Called(ctx, remove)

	if len(ret) == 0 {
		panic("no return value specified for RemoveItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, RemoveItem) error); ok {
		r0 = rf(ctx, remove)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartBasket provides a mock function with given fields: ctx, cmd
func (_m *MockCommands) StartBasket(ctx context.Context, cmd StartBasket) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for StartBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, StartBasket) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCommands creates a new instance of MockCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommands {
	mock := &MockCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
