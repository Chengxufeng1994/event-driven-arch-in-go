// Code generated by mockery v2.47.0. DO NOT EDIT.

package usecase

import (
	command "github.com/Chengxufeng1994/event-driven-arch-in-go/basket/internal/application/port/in/command"
	aggregate "github.com/Chengxufeng1994/event-driven-arch-in-go/basket/internal/domain/aggregate"

	context "context"

	mock "github.com/stretchr/testify/mock"

	query "github.com/Chengxufeng1994/event-driven-arch-in-go/basket/internal/application/port/in/query"
)

// MockBasketUseCase is an autogenerated mock type for the BasketUseCase type
type MockBasketUseCase struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, add
func (_m *MockBasketUseCase) AddItem(ctx context.Context, add command.AddItem) error {
	ret := _m.Called(ctx, add)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.AddItem) error); ok {
		r0 = rf(ctx, add)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelBasket provides a mock function with given fields: ctx, cmd
func (_m *MockBasketUseCase) CancelBasket(ctx context.Context, cmd command.CancelBasket) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CancelBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CancelBasket) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckoutBasket provides a mock function with given fields: ctx, checkout
func (_m *MockBasketUseCase) CheckoutBasket(ctx context.Context, checkout command.CheckoutBasket) error {
	ret := _m.Called(ctx, checkout)

	if len(ret) == 0 {
		panic("no return value specified for CheckoutBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CheckoutBasket) error); ok {
		r0 = rf(ctx, checkout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBasket provides a mock function with given fields: ctx, _a1
func (_m *MockBasketUseCase) GetBasket(ctx context.Context, _a1 query.GetBasket) (*aggregate.Basket, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetBasket")
	}

	var r0 *aggregate.Basket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.GetBasket) (*aggregate.Basket, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.GetBasket) *aggregate.Basket); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.Basket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.GetBasket) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItem provides a mock function with given fields: ctx, remove
func (_m *MockBasketUseCase) RemoveItem(ctx context.Context, remove command.RemoveItem) error {
	ret := _m.Called(ctx, remove)

	if len(ret) == 0 {
		panic("no return value specified for RemoveItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.RemoveItem) error); ok {
		r0 = rf(ctx, remove)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartBasket provides a mock function with given fields: ctx, cmd
func (_m *MockBasketUseCase) StartBasket(ctx context.Context, cmd command.StartBasket) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for StartBasket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.StartBasket) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockBasketUseCase creates a new instance of MockBasketUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBasketUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBasketUseCase {
	mock := &MockBasketUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
