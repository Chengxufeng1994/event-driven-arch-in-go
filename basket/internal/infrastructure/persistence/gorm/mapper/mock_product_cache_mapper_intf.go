// Code generated by mockery v2.47.0. DO NOT EDIT.

package mapper

import (
	entity "github.com/Chengxufeng1994/event-driven-arch-in-go/basket/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	po "github.com/Chengxufeng1994/event-driven-arch-in-go/basket/internal/infrastructure/persistence/gorm/po"
)

// MockProductCacheMapperIntf is an autogenerated mock type for the ProductCacheMapperIntf type
type MockProductCacheMapperIntf struct {
	mock.Mock
}

// ToDomain provides a mock function with given fields: store
func (_m *MockProductCacheMapperIntf) ToDomain(store po.ProductCache) (entity.Product, error) {
	ret := _m.Called(store)

	if len(ret) == 0 {
		panic("no return value specified for ToDomain")
	}

	var r0 entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(po.ProductCache) (entity.Product, error)); ok {
		return rf(store)
	}
	if rf, ok := ret.Get(0).(func(po.ProductCache) entity.Product); ok {
		r0 = rf(store)
	} else {
		r0 = ret.Get(0).(entity.Product)
	}

	if rf, ok := ret.Get(1).(func(po.ProductCache) error); ok {
		r1 = rf(store)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToPersistence provides a mock function with given fields: store
func (_m *MockProductCacheMapperIntf) ToPersistence(store entity.Product) (po.ProductCache, error) {
	ret := _m.Called(store)

	if len(ret) == 0 {
		panic("no return value specified for ToPersistence")
	}

	var r0 po.ProductCache
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Product) (po.ProductCache, error)); ok {
		return rf(store)
	}
	if rf, ok := ret.Get(0).(func(entity.Product) po.ProductCache); ok {
		r0 = rf(store)
	} else {
		r0 = ret.Get(0).(po.ProductCache)
	}

	if rf, ok := ret.Get(1).(func(entity.Product) error); ok {
		r1 = rf(store)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockProductCacheMapperIntf creates a new instance of MockProductCacheMapperIntf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductCacheMapperIntf(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductCacheMapperIntf {
	mock := &MockProductCacheMapperIntf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
