// Code generated by mockery v2.47.0. DO NOT EDIT.

package command

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCommands is an autogenerated mock type for the Commands type
type MockCommands struct {
	mock.Mock
}

// AuthorizeCustomer provides a mock function with given fields: ctx, authorize
func (_m *MockCommands) AuthorizeCustomer(ctx context.Context, authorize AuthorizeCustomer) error {
	ret := _m.Called(ctx, authorize)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AuthorizeCustomer) error); ok {
		r0 = rf(ctx, authorize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeSmsNumber provides a mock function with given fields: ctx, changeSmsNumber
func (_m *MockCommands) ChangeSmsNumber(ctx context.Context, changeSmsNumber ChangeSmsNumber) error {
	ret := _m.Called(ctx, changeSmsNumber)

	if len(ret) == 0 {
		panic("no return value specified for ChangeSmsNumber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ChangeSmsNumber) error); ok {
		r0 = rf(ctx, changeSmsNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableCustomer provides a mock function with given fields: ctx, disable
func (_m *MockCommands) DisableCustomer(ctx context.Context, disable DisableCustomer) error {
	ret := _m.Called(ctx, disable)

	if len(ret) == 0 {
		panic("no return value specified for DisableCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DisableCustomer) error); ok {
		r0 = rf(ctx, disable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableCustomer provides a mock function with given fields: ctx, enable
func (_m *MockCommands) EnableCustomer(ctx context.Context, enable EnableCustomer) error {
	ret := _m.Called(ctx, enable)

	if len(ret) == 0 {
		panic("no return value specified for EnableCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, EnableCustomer) error); ok {
		r0 = rf(ctx, enable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterCustomer provides a mock function with given fields: ctx, register
func (_m *MockCommands) RegisterCustomer(ctx context.Context, register RegisterCustomer) error {
	ret := _m.Called(ctx, register)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, RegisterCustomer) error); ok {
		r0 = rf(ctx, register)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCommands creates a new instance of MockCommands. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommands(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommands {
	mock := &MockCommands{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
