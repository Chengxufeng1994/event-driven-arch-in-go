// Code generated by mockery v2.47.0. DO NOT EDIT.

package usecase

import (
	command "github.com/Chengxufeng1994/event-driven-arch-in-go/depot/internal/application/port/in/command"
	aggregate "github.com/Chengxufeng1994/event-driven-arch-in-go/depot/internal/domain/aggregate"

	context "context"

	mock "github.com/stretchr/testify/mock"

	query "github.com/Chengxufeng1994/event-driven-arch-in-go/depot/internal/application/port/in/query"
)

// MockShoppingListUseCase is an autogenerated mock type for the ShoppingListUseCase type
type MockShoppingListUseCase struct {
	mock.Mock
}

// AssignShoppingList provides a mock function with given fields: ctx, cmd
func (_m *MockShoppingListUseCase) AssignShoppingList(ctx context.Context, cmd command.AssignShoppingList) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for AssignShoppingList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.AssignShoppingList) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelShoppingList provides a mock function with given fields: ctx, cmd
func (_m *MockShoppingListUseCase) CancelShoppingList(ctx context.Context, cmd command.CancelShoppingList) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CancelShoppingList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CancelShoppingList) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteShoppingList provides a mock function with given fields: ctx, cmd
func (_m *MockShoppingListUseCase) CompleteShoppingList(ctx context.Context, cmd command.CompleteShoppingList) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CompleteShoppingList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CompleteShoppingList) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateShoppingList provides a mock function with given fields: ctx, cmd
func (_m *MockShoppingListUseCase) CreateShoppingList(ctx context.Context, cmd command.CreateShoppingList) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateShoppingList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateShoppingList) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShoppingList provides a mock function with given fields: ctx, _a1
func (_m *MockShoppingListUseCase) GetShoppingList(ctx context.Context, _a1 query.GetShoppingList) (*aggregate.ShoppingList, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetShoppingList")
	}

	var r0 *aggregate.ShoppingList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.GetShoppingList) (*aggregate.ShoppingList, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.GetShoppingList) *aggregate.ShoppingList); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.ShoppingList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.GetShoppingList) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateShopping provides a mock function with given fields: ctx, cmd
func (_m *MockShoppingListUseCase) InitiateShopping(ctx context.Context, cmd command.InitiateShopping) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for InitiateShopping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.InitiateShopping) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockShoppingListUseCase creates a new instance of MockShoppingListUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShoppingListUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShoppingListUseCase {
	mock := &MockShoppingListUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
