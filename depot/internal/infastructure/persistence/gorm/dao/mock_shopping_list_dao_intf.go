// Code generated by mockery v2.47.0. DO NOT EDIT.

package dao

import (
	context "context"

	po "github.com/Chengxufeng1994/event-driven-arch-in-go/depot/internal/infastructure/persistence/gorm/po"
	mock "github.com/stretchr/testify/mock"
)

// MockShoppingListDaoIntf is an autogenerated mock type for the ShoppingListDaoIntf type
type MockShoppingListDaoIntf struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, shoppingListID
func (_m *MockShoppingListDaoIntf) Find(ctx context.Context, shoppingListID string) (*po.ShoppingList, error) {
	ret := _m.Called(ctx, shoppingListID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *po.ShoppingList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*po.ShoppingList, error)); ok {
		return rf(ctx, shoppingListID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *po.ShoppingList); ok {
		r0 = rf(ctx, shoppingListID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*po.ShoppingList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shoppingListID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOrderID provides a mock function with given fields: ctx, orderID
func (_m *MockShoppingListDaoIntf) FindByOrderID(ctx context.Context, orderID string) (*po.ShoppingList, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrderID")
	}

	var r0 *po.ShoppingList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*po.ShoppingList, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *po.ShoppingList); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*po.ShoppingList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, shoppingList
func (_m *MockShoppingListDaoIntf) Save(ctx context.Context, shoppingList *po.ShoppingList) error {
	ret := _m.Called(ctx, shoppingList)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *po.ShoppingList) error); ok {
		r0 = rf(ctx, shoppingList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, shoppingList
func (_m *MockShoppingListDaoIntf) Update(ctx context.Context, shoppingList *po.ShoppingList) error {
	ret := _m.Called(ctx, shoppingList)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *po.ShoppingList) error); ok {
		r0 = rf(ctx, shoppingList)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockShoppingListDaoIntf creates a new instance of MockShoppingListDaoIntf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShoppingListDaoIntf(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShoppingListDaoIntf {
	mock := &MockShoppingListDaoIntf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
