// Code generated by mockery v2.47.0. DO NOT EDIT.

package usecase

import (
	command "github.com/Chengxufeng1994/event-driven-arch-in-go/ordering/internal/application/port/in/command"
	aggregate "github.com/Chengxufeng1994/event-driven-arch-in-go/ordering/internal/domain/aggregate"

	context "context"

	mock "github.com/stretchr/testify/mock"

	query "github.com/Chengxufeng1994/event-driven-arch-in-go/ordering/internal/application/port/in/query"
)

// MockOrderUseCase is an autogenerated mock type for the OrderUseCase type
type MockOrderUseCase struct {
	mock.Mock
}

// ApproveOrder provides a mock function with given fields: ctx, cmd
func (_m *MockOrderUseCase) ApproveOrder(ctx context.Context, cmd command.ApproveOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for ApproveOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.ApproveOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelOrder provides a mock function with given fields: ctx, cmd
func (_m *MockOrderUseCase) CancelOrder(ctx context.Context, cmd command.CancelOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CancelOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteOrder provides a mock function with given fields: ctx, cmd
func (_m *MockOrderUseCase) CompleteOrder(ctx context.Context, cmd command.CompleteOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CompleteOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CompleteOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrder provides a mock function with given fields: ctx, cmd
func (_m *MockOrderUseCase) CreateOrder(ctx context.Context, cmd command.CreateOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrder provides a mock function with given fields: ctx, _a1
func (_m *MockOrderUseCase) GetOrder(ctx context.Context, _a1 query.GetOrder) (*aggregate.Order, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *aggregate.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.GetOrder) (*aggregate.Order, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.GetOrder) *aggregate.Order); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.GetOrder) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadyOrder provides a mock function with given fields: ctx, cmd
func (_m *MockOrderUseCase) ReadyOrder(ctx context.Context, cmd command.ReadyOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for ReadyOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.ReadyOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RejectOrder provides a mock function with given fields: ctx, cmd
func (_m *MockOrderUseCase) RejectOrder(ctx context.Context, cmd command.RejectOrder) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for RejectOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.RejectOrder) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockOrderUseCase creates a new instance of MockOrderUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderUseCase {
	mock := &MockOrderUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
