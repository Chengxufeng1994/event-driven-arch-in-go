// Code generated by mockery v2.47.0. DO NOT EDIT.

package usecase

import (
	context "context"

	command "github.com/Chengxufeng1994/event-driven-arch-in-go/payment/internal/application/port/int/command"

	mock "github.com/stretchr/testify/mock"
)

// MockPaymentUseCase is an autogenerated mock type for the PaymentUseCase type
type MockPaymentUseCase struct {
	mock.Mock
}

// AdjustInvoice provides a mock function with given fields: ctx, adjust
func (_m *MockPaymentUseCase) AdjustInvoice(ctx context.Context, adjust command.AdjustInvoice) error {
	ret := _m.Called(ctx, adjust)

	if len(ret) == 0 {
		panic("no return value specified for AdjustInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.AdjustInvoice) error); ok {
		r0 = rf(ctx, adjust)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthorizePayment provides a mock function with given fields: ctx, authorize
func (_m *MockPaymentUseCase) AuthorizePayment(ctx context.Context, authorize command.AuthorizePayment) error {
	ret := _m.Called(ctx, authorize)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizePayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.AuthorizePayment) error); ok {
		r0 = rf(ctx, authorize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelInvoice provides a mock function with given fields: ctx, cancel
func (_m *MockPaymentUseCase) CancelInvoice(ctx context.Context, cancel command.CancelInvoice) error {
	ret := _m.Called(ctx, cancel)

	if len(ret) == 0 {
		panic("no return value specified for CancelInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CancelInvoice) error); ok {
		r0 = rf(ctx, cancel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmPayment provides a mock function with given fields: ctx, confirm
func (_m *MockPaymentUseCase) ConfirmPayment(ctx context.Context, confirm command.ConfirmPayment) error {
	ret := _m.Called(ctx, confirm)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.ConfirmPayment) error); ok {
		r0 = rf(ctx, confirm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInvoice provides a mock function with given fields: ctx, create
func (_m *MockPaymentUseCase) CreateInvoice(ctx context.Context, create command.CreateInvoice) error {
	ret := _m.Called(ctx, create)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateInvoice) error); ok {
		r0 = rf(ctx, create)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PayInvoice provides a mock function with given fields: ctx, pay
func (_m *MockPaymentUseCase) PayInvoice(ctx context.Context, pay command.PayInvoice) error {
	ret := _m.Called(ctx, pay)

	if len(ret) == 0 {
		panic("no return value specified for PayInvoice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.PayInvoice) error); ok {
		r0 = rf(ctx, pay)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockPaymentUseCase creates a new instance of MockPaymentUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentUseCase {
	mock := &MockPaymentUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
