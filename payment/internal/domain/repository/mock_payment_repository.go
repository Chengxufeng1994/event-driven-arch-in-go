// Code generated by mockery v2.47.0. DO NOT EDIT.

package repository

import (
	context "context"

	aggregate "github.com/Chengxufeng1994/event-driven-arch-in-go/payment/internal/domain/aggregate"

	mock "github.com/stretchr/testify/mock"
)

// MockPaymentRepository is an autogenerated mock type for the PaymentRepository type
type MockPaymentRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, paymentID
func (_m *MockPaymentRepository) Find(ctx context.Context, paymentID string) (*aggregate.PaymentAgg, error) {
	ret := _m.Called(ctx, paymentID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *aggregate.PaymentAgg
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*aggregate.PaymentAgg, error)); ok {
		return rf(ctx, paymentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *aggregate.PaymentAgg); ok {
		r0 = rf(ctx, paymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.PaymentAgg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, payment
func (_m *MockPaymentRepository) Save(ctx context.Context, payment *aggregate.PaymentAgg) error {
	ret := _m.Called(ctx, payment)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *aggregate.PaymentAgg) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockPaymentRepository creates a new instance of MockPaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentRepository {
	mock := &MockPaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
