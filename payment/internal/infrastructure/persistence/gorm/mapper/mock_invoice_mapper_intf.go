// Code generated by mockery v2.47.0. DO NOT EDIT.

package mapper

import (
	aggregate "github.com/Chengxufeng1994/event-driven-arch-in-go/payment/internal/domain/aggregate"
	mock "github.com/stretchr/testify/mock"

	po "github.com/Chengxufeng1994/event-driven-arch-in-go/payment/internal/infrastructure/persistence/gorm/po"
)

// MockInvoiceMapperIntf is an autogenerated mock type for the InvoiceMapperIntf type
type MockInvoiceMapperIntf struct {
	mock.Mock
}

// ToDomain provides a mock function with given fields: invoice
func (_m *MockInvoiceMapperIntf) ToDomain(invoice *po.Invoice) (*aggregate.InvoiceAgg, error) {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for ToDomain")
	}

	var r0 *aggregate.InvoiceAgg
	var r1 error
	if rf, ok := ret.Get(0).(func(*po.Invoice) (*aggregate.InvoiceAgg, error)); ok {
		return rf(invoice)
	}
	if rf, ok := ret.Get(0).(func(*po.Invoice) *aggregate.InvoiceAgg); ok {
		r0 = rf(invoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.InvoiceAgg)
		}
	}

	if rf, ok := ret.Get(1).(func(*po.Invoice) error); ok {
		r1 = rf(invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToPersistence provides a mock function with given fields: invoice
func (_m *MockInvoiceMapperIntf) ToPersistence(invoice *aggregate.InvoiceAgg) (*po.Invoice, error) {
	ret := _m.Called(invoice)

	if len(ret) == 0 {
		panic("no return value specified for ToPersistence")
	}

	var r0 *po.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(*aggregate.InvoiceAgg) (*po.Invoice, error)); ok {
		return rf(invoice)
	}
	if rf, ok := ret.Get(0).(func(*aggregate.InvoiceAgg) *po.Invoice); ok {
		r0 = rf(invoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*po.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(*aggregate.InvoiceAgg) error); ok {
		r1 = rf(invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockInvoiceMapperIntf creates a new instance of MockInvoiceMapperIntf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockInvoiceMapperIntf(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockInvoiceMapperIntf {
	mock := &MockInvoiceMapperIntf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
