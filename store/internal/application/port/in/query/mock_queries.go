// Code generated by mockery v2.47.0. DO NOT EDIT.

package query

import (
	context "context"

	aggregate "github.com/Chengxufeng1994/event-driven-arch-in-go/store/internal/domain/aggregate"

	mock "github.com/stretchr/testify/mock"
)

// MockQueries is an autogenerated mock type for the Queries type
type MockQueries struct {
	mock.Mock
}

// GetCatalog provides a mock function with given fields: ctx, query
func (_m *MockQueries) GetCatalog(ctx context.Context, query GetCatalog) ([]*aggregate.CatalogProduct, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetCatalog")
	}

	var r0 []*aggregate.CatalogProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetCatalog) ([]*aggregate.CatalogProduct, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetCatalog) []*aggregate.CatalogProduct); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregate.CatalogProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetCatalog) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipatingStores provides a mock function with given fields: ctx, query
func (_m *MockQueries) GetParticipatingStores(ctx context.Context, query GetParticipatingStores) ([]*aggregate.MallStore, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetParticipatingStores")
	}

	var r0 []*aggregate.MallStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetParticipatingStores) ([]*aggregate.MallStore, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetParticipatingStores) []*aggregate.MallStore); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregate.MallStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetParticipatingStores) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, query
func (_m *MockQueries) GetProduct(ctx context.Context, query GetProduct) (*aggregate.CatalogProduct, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *aggregate.CatalogProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetProduct) (*aggregate.CatalogProduct, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetProduct) *aggregate.CatalogProduct); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.CatalogProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetProduct) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStore provides a mock function with given fields: ctx, query
func (_m *MockQueries) GetStore(ctx context.Context, query GetStore) (*aggregate.MallStore, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 *aggregate.MallStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetStore) (*aggregate.MallStore, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetStore) *aggregate.MallStore); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.MallStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetStore) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStores provides a mock function with given fields: ctx, query
func (_m *MockQueries) GetStores(ctx context.Context, query GetStores) ([]*aggregate.MallStore, error) {
	ret := _m.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for GetStores")
	}

	var r0 []*aggregate.MallStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, GetStores) ([]*aggregate.MallStore, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, GetStores) []*aggregate.MallStore); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregate.MallStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, GetStores) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockQueries creates a new instance of MockQueries. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQueries(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQueries {
	mock := &MockQueries{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
