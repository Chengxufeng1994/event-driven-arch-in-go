// Code generated by mockery v2.47.0. DO NOT EDIT.

package usecase

import (
	command "github.com/Chengxufeng1994/event-driven-arch-in-go/store/internal/application/port/in/command"
	aggregate "github.com/Chengxufeng1994/event-driven-arch-in-go/store/internal/domain/aggregate"

	context "context"

	mock "github.com/stretchr/testify/mock"

	query "github.com/Chengxufeng1994/event-driven-arch-in-go/store/internal/application/port/in/query"
)

// MockStoreUseCase is an autogenerated mock type for the StoreUseCase type
type MockStoreUseCase struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, cmd
func (_m *MockStoreUseCase) AddProduct(ctx context.Context, cmd command.AddProduct) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.AddProduct) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStore provides a mock function with given fields: ctx, cmd
func (_m *MockStoreUseCase) CreateStore(ctx context.Context, cmd command.CreateStore) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for CreateStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateStore) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecreaseProductPrice provides a mock function with given fields: ctx, cmd
func (_m *MockStoreUseCase) DecreaseProductPrice(ctx context.Context, cmd command.DecreaseProductPrice) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for DecreaseProductPrice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.DecreaseProductPrice) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableParticipation provides a mock function with given fields: ctx, cmd
func (_m *MockStoreUseCase) DisableParticipation(ctx context.Context, cmd command.DisableParticipation) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for DisableParticipation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.DisableParticipation) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableParticipation provides a mock function with given fields: ctx, cmd
func (_m *MockStoreUseCase) EnableParticipation(ctx context.Context, cmd command.EnableParticipation) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for EnableParticipation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.EnableParticipation) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCatalog provides a mock function with given fields: ctx, _a1
func (_m *MockStoreUseCase) GetCatalog(ctx context.Context, _a1 query.GetCatalog) ([]*aggregate.CatalogProduct, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCatalog")
	}

	var r0 []*aggregate.CatalogProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.GetCatalog) ([]*aggregate.CatalogProduct, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.GetCatalog) []*aggregate.CatalogProduct); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregate.CatalogProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.GetCatalog) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipatingStores provides a mock function with given fields: ctx, _a1
func (_m *MockStoreUseCase) GetParticipatingStores(ctx context.Context, _a1 query.GetParticipatingStores) ([]*aggregate.MallStore, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetParticipatingStores")
	}

	var r0 []*aggregate.MallStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.GetParticipatingStores) ([]*aggregate.MallStore, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.GetParticipatingStores) []*aggregate.MallStore); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregate.MallStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.GetParticipatingStores) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields: ctx, _a1
func (_m *MockStoreUseCase) GetProduct(ctx context.Context, _a1 query.GetProduct) (*aggregate.CatalogProduct, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *aggregate.CatalogProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.GetProduct) (*aggregate.CatalogProduct, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.GetProduct) *aggregate.CatalogProduct); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.CatalogProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.GetProduct) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStore provides a mock function with given fields: ctx, _a1
func (_m *MockStoreUseCase) GetStore(ctx context.Context, _a1 query.GetStore) (*aggregate.MallStore, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 *aggregate.MallStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.GetStore) (*aggregate.MallStore, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.GetStore) *aggregate.MallStore); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.MallStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.GetStore) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStores provides a mock function with given fields: ctx, _a1
func (_m *MockStoreUseCase) GetStores(ctx context.Context, _a1 query.GetStores) ([]*aggregate.MallStore, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetStores")
	}

	var r0 []*aggregate.MallStore
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, query.GetStores) ([]*aggregate.MallStore, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, query.GetStores) []*aggregate.MallStore); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregate.MallStore)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, query.GetStores) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncreaseProductPrice provides a mock function with given fields: ctx, cmd
func (_m *MockStoreUseCase) IncreaseProductPrice(ctx context.Context, cmd command.IncreaseProductPrice) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for IncreaseProductPrice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.IncreaseProductPrice) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RebrandProduct provides a mock function with given fields: ctx, cmd
func (_m *MockStoreUseCase) RebrandProduct(ctx context.Context, cmd command.RebrandProduct) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for RebrandProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.RebrandProduct) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RebrandStore provides a mock function with given fields: ctx, cmd
func (_m *MockStoreUseCase) RebrandStore(ctx context.Context, cmd command.RebrandStore) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for RebrandStore")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.RebrandStore) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveProduct provides a mock function with given fields: ctx, cmd
func (_m *MockStoreUseCase) RemoveProduct(ctx context.Context, cmd command.RemoveProduct) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.RemoveProduct) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStoreUseCase creates a new instance of MockStoreUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStoreUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStoreUseCase {
	mock := &MockStoreUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
