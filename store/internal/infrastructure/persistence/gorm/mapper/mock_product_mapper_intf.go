// Code generated by mockery v2.47.0. DO NOT EDIT.

package mapper

import (
	aggregate "github.com/Chengxufeng1994/event-driven-arch-in-go/store/internal/domain/aggregate"
	mock "github.com/stretchr/testify/mock"

	po "github.com/Chengxufeng1994/event-driven-arch-in-go/store/internal/infrastructure/persistence/gorm/po"
)

// MockProductMapperIntf is an autogenerated mock type for the ProductMapperIntf type
type MockProductMapperIntf struct {
	mock.Mock
}

// ToDomain provides a mock function with given fields: product
func (_m *MockProductMapperIntf) ToDomain(product *po.Product) *aggregate.Product {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for ToDomain")
	}

	var r0 *aggregate.Product
	if rf, ok := ret.Get(0).(func(*po.Product) *aggregate.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.Product)
		}
	}

	return r0
}

// ToDomainList provides a mock function with given fields: products
func (_m *MockProductMapperIntf) ToDomainList(products []*po.Product) []*aggregate.Product {
	ret := _m.Called(products)

	if len(ret) == 0 {
		panic("no return value specified for ToDomainList")
	}

	var r0 []*aggregate.Product
	if rf, ok := ret.Get(0).(func([]*po.Product) []*aggregate.Product); ok {
		r0 = rf(products)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregate.Product)
		}
	}

	return r0
}

// ToPersistent provides a mock function with given fields: product
func (_m *MockProductMapperIntf) ToPersistent(product *aggregate.Product) *po.Product {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for ToPersistent")
	}

	var r0 *po.Product
	if rf, ok := ret.Get(0).(func(*aggregate.Product) *po.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*po.Product)
		}
	}

	return r0
}

// NewMockProductMapperIntf creates a new instance of MockProductMapperIntf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductMapperIntf(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductMapperIntf {
	mock := &MockProductMapperIntf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
