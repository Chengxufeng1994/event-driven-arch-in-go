// Code generated by mockery v2.47.0. DO NOT EDIT.

package mapper

import (
	aggregate "github.com/Chengxufeng1994/event-driven-arch-in-go/store/internal/domain/aggregate"
	mock "github.com/stretchr/testify/mock"

	po "github.com/Chengxufeng1994/event-driven-arch-in-go/store/internal/infrastructure/persistence/gorm/po"
)

// MockStoreMapperIntf is an autogenerated mock type for the StoreMapperIntf type
type MockStoreMapperIntf struct {
	mock.Mock
}

// ToDomain provides a mock function with given fields: store
func (_m *MockStoreMapperIntf) ToDomain(store *po.Store) *aggregate.Store {
	ret := _m.Called(store)

	if len(ret) == 0 {
		panic("no return value specified for ToDomain")
	}

	var r0 *aggregate.Store
	if rf, ok := ret.Get(0).(func(*po.Store) *aggregate.Store); ok {
		r0 = rf(store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.Store)
		}
	}

	return r0
}

// ToDomainList provides a mock function with given fields: stores
func (_m *MockStoreMapperIntf) ToDomainList(stores []*po.Store) []*aggregate.Store {
	ret := _m.Called(stores)

	if len(ret) == 0 {
		panic("no return value specified for ToDomainList")
	}

	var r0 []*aggregate.Store
	if rf, ok := ret.Get(0).(func([]*po.Store) []*aggregate.Store); ok {
		r0 = rf(stores)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*aggregate.Store)
		}
	}

	return r0
}

// ToPersistent provides a mock function with given fields: store
func (_m *MockStoreMapperIntf) ToPersistent(store *aggregate.Store) *po.Store {
	ret := _m.Called(store)

	if len(ret) == 0 {
		panic("no return value specified for ToPersistent")
	}

	var r0 *po.Store
	if rf, ok := ret.Get(0).(func(*aggregate.Store) *po.Store); ok {
		r0 = rf(store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*po.Store)
		}
	}

	return r0
}

// NewMockStoreMapperIntf creates a new instance of MockStoreMapperIntf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStoreMapperIntf(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStoreMapperIntf {
	mock := &MockStoreMapperIntf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
